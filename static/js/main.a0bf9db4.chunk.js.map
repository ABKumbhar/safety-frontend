{"version":3,"sources":["logo.svg","Components/NavbarComponent.js","Components/HeaderComponent.js","redux/Industry/IndustryActions.js","redux/Industry/IndustryTypes.js","redux/equipment/EquipmentActions.js","redux/equipment/EquipmentTypes.js","Components/CardComponent.js","Components/IndustryComponent.js","Components/HomeComponent.js","redux/Industry/IndustryReducer.js","redux/equipment/EquipmentReducer.js","redux/rootReducer.js","redux/store.js","Components/EquipmentComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarComponent","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","href","HeaderComponent","Jumbotron","fetchIndustryRequest","type","fetchIndustrySuccess","industry","payload","fetchIndustryFailure","error","fetchEquipmentRequest","fetchEquipmentSuccess","equipment","fetchEquipmentFailure","CardComponent","props","setisOpen","Row","Col","xl","lg","Card","CardBody","CardTitle","ind","name","CardText","adinfo","Button","questioni","map","q","key","id","number","question","answer","urlref","questione","connect","state","IndustryData","industries","dispatch","fetchIndustry","axios","get","then","response","data","console","log","catch","message","search","setSearch","filteredIndustries","setFilteredIndustries","useEffect","filter","toLowerCase","includes","loading","Spinner","style","textAlign","placeholder","onChange","e","target","value","HomeComponent","query","setQuery","item","setItem","queryi","setQueryi","res","Form","Input","i","initialState","IndustryReducer","action","EquipmentReducer","rootReducer","combineReducers","equipments","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","EquipmentData","fetchEquipment","filteredEquipments","setFilteredEquipments","App","exact","path","component","IndustryComponent","EquipmentComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a0bf9db4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState} from 'react'\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavLink,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n  } from 'reactstrap';\r\nfunction NavbarComponent() {const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    return (\r\n        <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand >Navigate Here</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink className=\"nav-link\" href=\"#/\">\r\n              <span> Home </span>\r\n          </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n            <NavLink  href=\"#/industry\">\r\n              <span> Industry </span>\r\n          </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n            <NavLink className=\"nav-link\" href=\"#/equipment\">\r\n              <span> Equipment </span>\r\n          </NavLink>\r\n            </NavItem>\r\n\r\n            \r\n        </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavbarComponent\r\n","import React,{useState,useEffect} from 'react'\r\nimport { Card, CardBody, CardImg, CardText, CardTitle, Form, Input, Button } from 'reactstrap'\r\nimport NavbarComponent from './NavbarComponent'\r\nimport axios from 'axios'\r\nimport { Jumbotron } from 'reactstrap'\r\n\r\nfunction HeaderComponent() {\r\n    return (\r\n    <div className=\"Header\">\r\n              \r\n\r\n        <Jumbotron>\r\n            <h1> Process safety App </h1>\r\n                <br />\r\n                <div className=\"form\">\r\n                </div>\r\n            <br />\r\n            <span className=\"fa fa-home fa-lg\">  Information about startup, shutdowm and maintenance availaible at the touch of your screen for free!</span>\r\n        <NavbarComponent/>\r\n\r\n        </Jumbotron>\r\n        \r\n\r\n\r\n    </div>);\r\n}\r\n\r\nexport default HeaderComponent","import axios from 'axios'\r\nimport {\r\n  FETCH_INDUSTRY_REQUEST,\r\n  FETCH_INDUSTRY_SUCCESS,\r\n  FETCH_INDUSTRY_FAILURE\r\n} from './IndustryTypes'\r\n\r\nexport const fetchIndustry = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchIndustryRequest())\r\n    axios\r\n      .get('https://abkumbhar.pythonanywhere.com/industry/')\r\n    // .get('http://127.0.0.1:8000/industry/')\r\n      .then(response => {\r\n        // response.data is the users\r\n        const industry = response.data\r\n        console.log(response.data)\r\n        dispatch(fetchIndustrySuccess(industry))\r\n      })\r\n      .catch(error => {\r\n        // error.message is the error message\r\n        dispatch(fetchIndustryFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchIndustryRequest = () => {\r\n  return {\r\n    type: FETCH_INDUSTRY_REQUEST\r\n  }\r\n}\r\n\r\nexport const fetchIndustrySuccess = industry => {\r\n  return {\r\n    type: FETCH_INDUSTRY_SUCCESS,\r\n    payload: industry\r\n  }\r\n}\r\n\r\nexport const fetchIndustryFailure = error => {\r\n  return {\r\n    type: FETCH_INDUSTRY_FAILURE,\r\n    payload: error\r\n  }\r\n}\r\n","export const FETCH_INDUSTRY_REQUEST = 'FETCH_INDUSTRY_REQUEST'\r\nexport const FETCH_INDUSTRY_SUCCESS = 'FETCH_INDUSTRY_SUCCESS'\r\nexport const FETCH_INDUSTRY_FAILURE = 'FETCH_INDUSTRY_FAILURE'","import axios from 'axios'\r\nimport {\r\n  FETCH_EQUIPMENT_REQUEST,\r\n  FETCH_EQUIPMENT_SUCCESS,\r\n  FETCH_EQUIPMENT_FAILURE\r\n} from './EquipmentTypes'\r\n\r\nexport const fetchEquipment = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchEquipmentRequest())\r\n    axios\r\n      .get('https://abkumbhar.pythonanywhere.com/equipment/')\r\n    // .get('http://127.0.0.1:8000/equipment/')\r\n      .then(response => {\r\n        // response.data is the users\r\n        const equipment = response.data\r\n        console.log(response.data)\r\n        dispatch(fetchEquipmentSuccess(equipment))\r\n      })\r\n      .catch(error => {\r\n        // error.message is the error message\r\n        dispatch(fetchEquipmentFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchEquipmentRequest = () => {\r\n  return {\r\n    type: FETCH_EQUIPMENT_REQUEST\r\n  }\r\n}\r\n\r\nexport const fetchEquipmentSuccess = equipment => {\r\n  return {\r\n    type: FETCH_EQUIPMENT_SUCCESS,\r\n    payload: equipment\r\n  }\r\n}\r\n\r\nexport const fetchEquipmentFailure = error => {\r\n  return {\r\n    type: FETCH_EQUIPMENT_FAILURE,\r\n    payload: error\r\n  }\r\n}\r\n","export const FETCH_EQUIPMENT_REQUEST = 'FETCH_EQUIPMENT_REQUEST'\r\nexport const FETCH_EQUIPMENT_SUCCESS = 'FETCH_EQUIPMENT_SUCCESS'\r\nexport const FETCH_EQUIPMENT_FAILURE = 'FETCH_EQUIPMENT_FAILURE'","import React from 'react'\r\nimport {useState} from 'react'\r\nimport { Row, Col, Button, Card, CardBody, CardText, CardTitle, Spinner } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction CardComponent(props) {\r\n    const [isOpen, setisOpen] = useState(false) \r\n    const handleClick = () => {\r\n        setisOpen(!isOpen)\r\n        \r\n        }\r\n      \r\n    return (\r\n        <div>\r\n            <Row>\r\n            <Col xl=\"4\" lg=\"6\">\r\n            </Col>\r\n            <Col xl=\"4\" lg=\"6\">\r\n            <Card className=\"mb-5\">\r\n            <CardBody>\r\n              <CardTitle className=\"card-title font-weight-bold font-size-lg\">{props.ind.name}</CardTitle>\r\n              <CardText>\r\n                {props.ind.adinfo}\r\n              </CardText>\r\n              </CardBody>\r\n              <Button onClick= {handleClick}>\r\n                { isOpen ?\r\n                (<div>Read Below</div>):(<div>More ...</div>)}\r\n              </Button>\r\n\r\n              \r\n              \r\n              <table className=\"table table-hover\">\r\n                \r\n                \r\n            {\r\n              isOpen ? (\r\n                <tbody>\r\n                <tr>\r\n                \r\n                         {props.ind.questioni &&\r\n                props.ind.questioni.map((q) => \r\n                \r\n                <div>\r\n                <li key={q.id}>\r\n                <td>\r\n                <b>Question {q.number} : {q.question}</b>\r\n                <br/>\r\n                Ans : {q.answer}\r\n                <br/>\r\n                Further info / Ref : {q.urlref}\r\n                </td>\r\n                </li>\r\n                </div>\r\n                )} \r\n                {props.ind.questione &&\r\n                props.ind.questione.map((q) => \r\n                <div>\r\n                  <li key={q.id}>\r\n                  <tr>\r\n                    <td>\r\n                <b>Question {q.number} : {q.question}</b>\r\n                <br/>\r\n                Ans : {q.answer}\r\n                <br/>\r\n                Further info / Ref : {q.urlref}\r\n                </td>\r\n                </tr>\r\n                </li>\r\n                </div>\r\n                )}\r\n                </tr>\r\n                </tbody>\r\n                ) : (<tbody><tr></tr></tbody> )\r\n                \r\n            } \r\n            \r\n            </table>\r\n              \r\n               <br/>\r\n              \r\n\r\n              \r\n              \r\n              \r\n            </Card >\r\n            </Col>\r\n            <Col xl=\"4\" lg=\"6\">\r\n            </Col>\r\n            </Row>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardComponent\r\n","import React, {Fragment, useEffect, useState} from 'react';\r\nimport {fetchIndustry} from '../redux'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {connect,useDispatch,useSelector} from 'react-redux';\r\nimport { Form,Row, Col, Button, Card, CardBody, CardText, CardTitle, Spinner } from 'reactstrap';\r\nimport CardComponent from './CardComponent'\r\n\r\nfunction IndustryComponent({IndustryData,fetchIndustry}) {\r\n  //const [isOpen, setisOpen] = useState(false) \r\n  const [search, setSearch] = useState(\"\");\r\n  const [filteredIndustries, setFilteredIndustries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchIndustry()\r\n  },[])\r\n \r\n\r\n  useEffect(() => {\r\n    setFilteredIndustries(\r\n      IndustryData.industry.filter(ind =>\r\n        ind.name.toLowerCase().includes(search.toLowerCase())\r\n      )\r\n    );\r\n  }, [search, IndustryData]);\r\n\r\n    return IndustryData.loading ? (\r\n <div>\r\n <Spinner>\r\n </Spinner>\r\n</div>\r\n      ) : IndustryData.error ? (\r\n      <h2>{IndustryData.error}</h2>\r\n    ) : (\r\n      <div>\r\n        <h2 style = {{textAlign:\"center\"}}>Industry List</h2>\r\n        <div >\r\n        <div style={{textAlign:\"center\"}}>\r\n        <input \r\n        type=\"text\"\r\n        placeholder=\"Search Industries\"\r\n        onChange={e => setSearch(e.target.value)}/>\r\n        </div>\r\n          {     \r\n      \r\n\r\n            filteredIndustries.map(ind => \r\n          //  <Row>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   </Col>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   <Card className=\"mb-5\" e-card-horizontal\t>\r\n          //   <CardBody>\r\n          //     <CardTitle className=\"card-title font-weight-bold font-size-lg\">{ind.name}</CardTitle>\r\n          //     <CardText>\r\n          //       {ind.adinfo}\r\n          //     </CardText>\r\n          //     </CardBody>\r\n          //     <Button onClick= {handleClick}>\r\n          //       More ...\r\n          //     </Button>\r\n              \r\n          //     <CardText>\r\n          //       <div>\r\n          //   {\r\n          //     isOpen ? (\r\n          //       <div>\r\n          //       {\r\n          //       ind.questioni.map((q) => \r\n          //       <div>\r\n          //       <b>{q.question}</b>\r\n          //       <br/>\r\n          //       {q.answer}\r\n          //       </div>\r\n          //       )} </div>\r\n          //       ) : (<div></div> )\r\n                \r\n          //   }</div>\r\n          //      </CardText>\r\n              \r\n              \r\n              \r\n          //   </Card >\r\n          //   </Col>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   </Col>\r\n          //   </Row>\r\n          <li key={ind.id}>\r\n          <CardComponent ind = {ind}/>\r\n          </li>\r\n            )}\r\n        </div>\r\n      </div>\r\n    )\r\n        \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      IndustryData: state.industries\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      fetchIndustry: () => dispatch(fetchIndustry())\r\n    }\r\n  }\r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(IndustryComponent)","import React,{useState,useEffect} from 'react'\r\nimport {Input,Form,Button} from 'reactstrap'\r\nimport CardComponent from './CardComponent'\r\nimport axios from 'axios'\r\nfunction HomeComponent() {\r\n    const [query,setQuery]=useState(\"helo\")\r\n    const [item,setItem] = useState([])\r\n    const [queryi,setQueryi]=useState(\"hi\")\r\n    useEffect(() => {\r\n        axios\r\n        .get(`https://abkumbhar.pythonanywhere.com/list?search=${query}`)\r\n        .then((res)=> \r\n           {console.log(res)\r\n        setItem(res.data)}\r\n            \r\n        )\r\n        .catch((error)=>\r\n        {console.log(error.message)}\r\n        )\r\n\r\n     ;\r\n      }, [query]);\r\n \r\n\r\n    return (\r\n        <div>\r\n        <Form >\r\n        <Input type=\"search\" placeholder=\"search here ...\" name=\"search\" onChange={e => setQueryi(e.target.value)}/>\r\n        <Button onClick={e => setQuery(queryi)}>Submit</Button>\r\n        \r\n        </Form>\r\n       <div>\r\n           {item.map(i =>\r\n           <li key={i.id}><CardComponent ind={i}/></li>\r\n           )}\r\n       </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeComponent\r\n","import {\r\n    FETCH_INDUSTRY_REQUEST,\r\n    FETCH_INDUSTRY_SUCCESS,\r\n    FETCH_INDUSTRY_FAILURE\r\n  } from './IndustryTypes'\r\n  \r\n  const initialState = {\r\n    loading: false,\r\n    industry: [],\r\n    error: ''\r\n  }\r\n  \r\n  const IndustryReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case FETCH_INDUSTRY_REQUEST:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        }\r\n      case FETCH_INDUSTRY_SUCCESS:\r\n        return {\r\n          loading: false,\r\n          industry: action.payload,\r\n          error: ''\r\n        }\r\n      case FETCH_INDUSTRY_FAILURE:\r\n        return {\r\n          loading: false,\r\n          industry: [],\r\n          error: action.payload\r\n        }\r\n      default: return state\r\n    }\r\n  }\r\n  \r\n  export default IndustryReducer\r\n  ","import {\r\n    FETCH_EQUIPMENT_REQUEST,\r\n    FETCH_EQUIPMENT_SUCCESS,\r\n    FETCH_EQUIPMENT_FAILURE\r\n  } from './EquipmentTypes'\r\n  \r\n  const initialState = {\r\n    loading: false,\r\n    equipment: [],\r\n    error: ''\r\n  }\r\n  \r\n  const EquipmentReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case FETCH_EQUIPMENT_REQUEST:\r\n        return {\r\n          ...state,\r\n          loading: true\r\n        }\r\n      case FETCH_EQUIPMENT_SUCCESS:\r\n        return {\r\n          loading: false,\r\n          equipment: action.payload,\r\n          error: ''\r\n        }\r\n      case FETCH_EQUIPMENT_FAILURE:\r\n        return {\r\n          loading: false,\r\n          equipment: [],\r\n          error: action.payload\r\n        }\r\n      default: return state\r\n    }\r\n  }\r\n  \r\n  export default EquipmentReducer\r\n  ","import { combineReducers } from 'redux'\r\nimport IndustryReducer from './Industry/IndustryReducer'\r\nimport EquipmentReducer from './equipment/EquipmentReducer'\r\nconst rootReducer = combineReducers({\r\n  industries : IndustryReducer,\r\n  equipments : EquipmentReducer\r\n\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger, thunk))\r\n)\r\n\r\n\r\n","import React, {Fragment, useEffect, useState} from 'react';\r\nimport {fetchEquipment} from '../redux'\r\nimport {connect} from 'react-redux';\r\nimport { Button, Card, CardBody, CardText, CardTitle, Spinner } from 'reactstrap';\r\nimport CardComponent from './CardComponent'\r\n\r\nfunction EquipmentComponent({EquipmentData,fetchEquipment}) {\r\n  const [filteredEquipments, setFilteredEquipments] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [isOpen, setisOpen] = useState(false) \r\n  useEffect(() => {\r\n    fetchEquipment()\r\n  },[])\r\n \r\n  useEffect(() => {\r\n    setFilteredEquipments(\r\n      EquipmentData.equipment.filter(ind =>\r\n        ind.name.toLowerCase().includes(search.toLowerCase())\r\n      )\r\n    );\r\n  }, [search, EquipmentData]);\r\n\r\n\r\n    return EquipmentData.loading ? (\r\n<Spinner >\r\n\r\n</Spinner>\r\n      ) : EquipmentData.error ? (\r\n      <h2>{EquipmentData.error}</h2>\r\n    ) : (\r\n      <div >\r\n        <h2 style = {{textAlign:\"center\"}}>Equipment List</h2>\r\n        <div>\r\n          <div style={{textAlign:\"center\"}}>\r\n        <input \r\n        type=\"text\"\r\n        placeholder=\"Search Equipments\"\r\n        onChange={e => setSearch(e.target.value)}/>\r\n      </div>\r\n\r\n          {\r\n            filteredEquipments.map(ind => \r\n          //  <Row>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   </Col>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   <Card className=\"mb-5\" e-card-horizontal\t>\r\n          //   <CardBody>\r\n          //     <CardTitle className=\"card-title font-weight-bold font-size-lg\">{ind.name}</CardTitle>\r\n          //     <CardText>\r\n          //       {ind.adinfo}\r\n          //     </CardText>\r\n          //     </CardBody>\r\n          //     <Button onClick= {handleClick}>\r\n          //       More ...\r\n          //     </Button>\r\n              \r\n          //     <CardText>\r\n          //       <div>\r\n          //   {\r\n          //     isOpen ? (\r\n          //       <div>\r\n          //       {\r\n          //       ind.questioni.map((q) => \r\n          //       <div>\r\n          //       <b>{q.question}</b>\r\n          //       <br/>\r\n          //       {q.answer}\r\n          //       </div>\r\n          //       )} </div>\r\n          //       ) : (<div></div> )\r\n                \r\n          //   }</div>\r\n          //      </CardText>\r\n              \r\n              \r\n              \r\n          //   </Card >\r\n          //   </Col>\r\n          //   <Col xl=\"4\" lg=\"6\">\r\n          //   </Col>\r\n          //   </Row>\r\n          <li key={ind.id}>\r\n          <CardComponent ind = {ind}/>\r\n          </li>\r\n            )}\r\n        </div>\r\n      </div>\r\n    )\r\n        \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      EquipmentData: state.equipments\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n    return {\r\n      fetchEquipment: () => dispatch(fetchEquipment())\r\n    }\r\n  }\r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(EquipmentComponent)","import React, { Fragment, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HeaderComponent from './Components/HeaderComponent';\nimport IndustryComponent from './Components/IndustryComponent';\nimport NavbarComponent from './Components/NavbarComponent'\nimport {HashRouter as Router, BrowserRouter, Switch, Route, Redirect, withRouter } from 'react-router-dom';\nimport createHistory from 'history/createBrowserHistory';\nimport HomeComponent from './Components/HomeComponent'\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport EquipmentComponent from './Components/EquipmentComponent'\nfunction App() {      \n\n\n  return (\n  \n    <Fragment>\n       <HeaderComponent/> \n      <div>\n          \n          <Router >\n          <Switch>\n               <Route exact path=\"/\" component={HomeComponent}/>  \n            <Route path='/industry' component={IndustryComponent}/>\n            <Route path='/equipment' component={EquipmentComponent}/>\n          </Switch>\n          \n            </Router>\n     </div>\n     </Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './redux/store'\nimport { Provider } from 'react-redux';\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}